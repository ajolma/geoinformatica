/*! \page geo_raster Geo::Raster

\section index_geo_raster Geo::Raster

Geo::Raster is an object-oriented interface to \htmlonly <a
href="../../libral/html/"> \endhtmlonly libral \htmlonly </a>
\endhtmlonly, a C library for rasters and raster algebra. Geo::Raster
makes using libral easy and adds some very useful functionality to
it. libral rasters are in-memory for fast and easy processing. libral
rasters can be created from GDAL rasters. GDAL provides access to
rasters in many formats.

\subsection index_geo_raster_1 In-place methods

Many methods adjust their behavior depending on the context, i.e.,
whether they are expected to return a value or not. 

\subsection index_geo_raster_2 Arithmetics

Add/subtract a scalar or another grid to a grid:

\code
    $b = $a + $x; # is equal to $b = $a->plus($x);
    $b = $a - $x; # is equal to $b = $a->minus($x);
\endcode

In-place versions

\code
    $gd += $x; # is equal to $gd->add($x);
    $gd -= $x; # is equal to $gd->subtract($x);
\endcode

Multiply/divide the grid by a scalar or by another grid:

\code
    $b = $a * $x; # is equal to $b = $a->times($x);
    $b = $a / $x; # is equal to $b = $a->over($x);
\endcode

In-place versions

\code
    $gd *= $x; # is equal to $gd->multiply_by($x);
    $gd /= $x; # is equal to $gd->divide_by($x);
\endcode

NOTE: THIS IS NOT MATRIX MULTIPLICATION: what goes on is, e.g.:

\code
  for all i,j: b[i,j] = a[i,j] * x[i,j]
\endcode

Modulus:

\code
    $b = $a % $x; # is equal to $b = $a->modulo($x);
    $gd %= $x;    # is equal to $gd->modulus_with($x);
\endcode

Power:

\code
    $b = $a**$x;  # is equal to $b = $a->power($x);
    $gd **= $x;   # is equal to $gd->to_power_of($x);
\endcode


DO NOT use void context algebraic operations like $a + 5; The effect
is not what you expect and it will generate a warning if run with the
B<-w> switch.

Integer grids are silently converted to real grids if the operand is a
real number or a real grid or if the operator is "/" (except in
modulus, which is defined only for integer grids).

\subsection index_geo_raster_3 Mathematical operations

Integer grids are silently converted to real grids if these methods
are applied. The only exception is abs, which is defined for integer
grids:

\code
    $b = $a->abs();
    $b = $a->acos();
    $b = $a->atan();
    $c = $a->atan2($b);
    $b = $a->ceil();
    $b = $a->cos();
    $b = $a->cosh();
    $b = $a->exp();
    $b = $a->floor();
    $b = $a->log();
    $b = $a->log10();
    $b = $a->sin();
    $b = $a->sinh();
    $b = $a->sqrt();
    $b = $a->tan();
    $b = $a->tanh();
\endcode

abs, atan2, cos, exp, log, sin, sqrt are overloaded

In-place versions (use always methods for in-place versions) change
the original grid:

\code
    $a->abs();
\endcode
    
...etc.

If $a is not a grid, the functions fall back to standard Perl math
functions.

NOTE: ceil and floor are defined only for real grids and return a real
grid. Geo::Raster method round can be used to convert a real grid to an
integer grid.

\code
    $gd->round();
\endcode

or 

\code
    $b = $a->round();
\endcode

\subsection index_geo_raster_4 Comparisons between grids

Comparison of grid to a scalar or to another grid:

\code
    $g2 = $g1 op $x;
\endcode

where op is "<", ">", "<=", ">=", "==", "!=", or "<=>". $x may be a
scalar or another grid. The return value is always an integer
grid. For in-place versions of the comparisons use the methods
lt, gt, le, ge, eq, ne, and cmp.

So there are four cases of the use of comparison operations:

\verbatim
                    a unchanged
 1. b = a->lt(0);      yes     
 2. a->lt(0);          no      
 3. b = a < 0;         yes     
 4. b = 0 < a;         yes     
\endverbatim

DO NOT use void context comparisons like $a < 0; The effect is not
what you expect and it will generate a warning if run with the
-w switch.

\subsection index_geo_raster_5 Logical operations

\code
    $b = $a->not();
    $c = $a->and($b);
    $c = $a->or($b);
\endcode

in-place versions (changes a)

\code
    $a->not();
    $a->and($b);
    $a->or($b);
\endcode

or

\code
use Geo::Raster /:logics/;

    $b = not($a);
    $c = and($a, $b);
    $c = or($a, $b);
\endcode

\subsection index_geo_raster_6 Zonal functions

All zonal functions require two grids: the operand grid and the zones
grid. The operand grid may be any grid. The zones grid has to be an
integer grid. The zonal functions all return a hash, where the keys
are the integers from the zones grid (not nodata but 0 yes). The
values in the hash are either all the values (nodata values skipped)
from the zone (as a reference to an array) or some function (count,
sum, min, max, mean, variance) of them. The method which returns all
the zone data may of course be used to calculate whatever function but
this can take a lot of memory and computing time in the case of large
grids. Division by n-1 is used for calculating variance.

\code
    $zh = $gd->zones($zones);

    $counts = $gd->zonal_count($zones);
    $sums = $gd->zonal_sum($zones);
    $mins = $gd->zonal_min($zones);
    $maxs = $gd->zonal_max($zones);
    $means = $gd->zonal_mean($zones);
    $variances = $gd->zonal_variance($zones);
\endcode

The zones grid can be changed using the method 

\code
    $zones->grow_zones($grow);
\endcode

or

\code
    $new_zones = $zones->grow_zones($grow);
\endcode

which "grows" each zone in the zones grid iteratively to areas
designated by the (binary) grid grow.

Note that also zero zone is also a zone. Only nodata areas are not
zoned.

*/	
