#ifndef RAL_CONFIG_H
#define RAL_CONFIG_H

/**\file ral/config.h
   \brief defines RAL_INTEGER, RAL_REAL, available subsystems
*/

/* Available subsystems */
@HAVE_GDAL@ RAL_HAVE_GDAL
@HAVE_GDK_PIXBUF@ RAL_HAVE_GDK_PIXBUF

/* The implementation datatype for integer rasters */
#define RAL_INTEGER short
#define RAL_INTEGER_TYPE_NAME "short"

typedef RAL_INTEGER *RAL_INTEGER_HANDLE;

/* Maximum integer value */
#define RAL_INTEGER_MAX SHRT_MAX

/* Minimum integer value */
#define RAL_INTEGER_MIN SHRT_MIN

/* The implementation datatype for real rasters */
#define RAL_REAL float
#define RAL_REAL_TYPE_NAME "float"

typedef RAL_REAL *RAL_REAL_HANDLE;

#ifdef MSVC
#define RAL_CALL __declspec(dllexport) __cdecl
#else
#define RAL_CALL
#endif

#ifdef RAL_HAVE_GDAL
#include <gdal.h>
#include <ogr_api.h>
#include <ogr_srs_api.h>
#else
#define TRUE 1
#define FALSE 0
typedef struct {
    short c1, c2, c3, c4;
} GDALColorEntry;
typedef unsigned int OGRwkbGeometryType;
#endif

#ifdef RAL_HAVE_GDK_PIXBUF
#include <glib.h>
#include <gdk-pixbuf/gdk-pixbuf.h>
#else
#define guchar char
#define gpointer void *
#define gboolean int
#define GdkColorspace int
typedef void (* GdkPixbufDestroyNotify) (guchar *pixels, gpointer data);
#endif

#endif
